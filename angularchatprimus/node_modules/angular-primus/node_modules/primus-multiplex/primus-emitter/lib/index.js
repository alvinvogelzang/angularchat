'use strict';

/**
 * Module dependencies.
 */

var emitter = require('./emitter')
  , Emitter = emitter()
  , noop = function noop(){};

/**
 * Export `PrimusEmitter`.
 */

module.exports = PrimusEmitter;

/**
 * Constructor.
 *
 * @param {Primus} primus The primus instance.
 * @api public
 */

function PrimusEmitter(primus) {
  primus.$ = primus.$ || {};
  primus.$.PrimusEmitter = PrimusEmitter;
  return spark(primus.Spark, Emitter);
}

/**
 * Source code for plugin library.
 *
 * @type {String}
 * @api public
 */

PrimusEmitter.library = [
  ';(function (Primus, undefined) {',
  '"use strict";',
    spark.toString(),
    emitter.toString(),
  'if (undefined !== Primus)',
  'Primus.PrimusEmitter = emitter()',
  //'spark(Primus, emitter());',
  '})(Primus);'
].join('\n');

/**
 * Expose server.
 */

PrimusEmitter.server = PrimusEmitter;

/**
 * Expose client.
 */

PrimusEmitter.client = function (primus) {

  var Emitter = Primus.PrimusEmitter;

  /**
   * Adding reference to Emitter.
   */

  primus.__Emitter__ = Emitter;

  /**
   * Initialise the Primus and setup all
   * parsers and internal listeners.
   *
   * @api private
   */

  primus.__emit__ = primus.emit;

  primus.emitter = new Emitter(primus);

  /**
   * Emits to this Spark.
   *
   * @return {Socket} self
   * @api public
   */

  primus.emit = function (ev) {
    // ignore newListener event to avoid this error in node 0.8
    // https://github.com/cayasso/primus-emitter/issues/3
    if ('newListener' === ev) return primus;
    primus.emitter.emit.apply(primus.emitter, arguments);
    return primus;
  };

};

/**
 * Expose `Emitter`.
 */

PrimusEmitter.Emitter = Emitter;